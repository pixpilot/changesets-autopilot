/**
 * Checks if a commit message indicates a version or release commit generated by this action
 */
export function isVersionOrReleaseCommit(message: string): boolean {
  const trimmedMessage = message.trim();

  // Only allow spaces (not tabs/newlines) between parts
  const space = ' ';
  const pkgPattern = '((@[-a-zA-Z0-9_.]+/)?[-a-zA-Z0-9_.]+@)?';
  const versionPattern = '[0-9]+\\.[0-9]+\\.[0-9]+';
  const prereleasePattern = '(-[a-zA-Z0-9_.]+(\\.[a-zA-Z0-9_.]+)*)?';
  const skipCiPattern = '\\[skip ci\\]';
  const fullPattern = `^chore\\(release\\):${space}+${pkgPattern}${versionPattern}${prereleasePattern}${space}+${skipCiPattern}$`;

  if (new RegExp(fullPattern, 'i').test(trimmedMessage)) {
    return true;
  }

  // Multi-package release: "chore(release): bump package versions [skip ci]"
  if (/^chore\(release\): +bump package versions +\[skip ci\]$/i.test(trimmedMessage)) {
    return true;
  }

  // Legacy pattern (for backward compatibility): "chore(release): version packages [skip ci]"
  if (/^chore\(release\): +version packages +\[skip ci\]$/i.test(trimmedMessage)) {
    return true;
  }

  return false;
}
